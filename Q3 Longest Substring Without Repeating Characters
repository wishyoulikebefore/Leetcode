"""
Given a string, find the length of the longest substring without repeating characters.
Examples:
Given "abcabcbb", the answer is "abc", which the length is 3.
Given "bbbbb", the answer is "b", with the length of 1.
Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
"""

""""
思路：每个字母最新的index作为dict的value，计算长度
要考虑到结束还没遇到重复这种情况
"""
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        dic, maxLen, start, = {}, 0, 0
        for i, ch in enumerate(s):
            if ch in dic:
                res = max(maxLen, i-start)
                # 重置start位置：出现连续重复后之前的字符串作废，如abcca中，abcc的start为dic[ch]+1，a的start不变
                start = max(start, dic[ch]+1)
            dic[ch] = i
        # answer is either in the begining/middle or some mid to the end of string
        return max(maxLen, len(s)-start)
